generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique @db.VarChar(500)
  name         String     @db.VarChar(500)
  password     String     @db.VarChar(500)
  phoneNumber  String?    @db.VarChar(11)
  avatar       String?    @db.VarChar(1000)
  status       UserStatus @default(INACTIVE)
  premiumCoins Int        @default(0)
  freeCoins    Int        @default(0)
  exp          Int        @default(0)
  roleId       Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  levelId      Int?
  level        Level?     @relation(fields: [levelId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  createdPermissions         Permission[]        @relation("PermissionCreatedBy")
  updatedPermissions         Permission[]        @relation("PermissionUpdatedBy")
  deletedPermissions         Permission[]        @relation("PermissionDeletedBy")
  createdRoles               Role[]              @relation("RoleCreatedBy")
  updatedRoles               Role[]              @relation("RoleUpdatedBy")
  deletedRoles               Role[]              @relation("RoleDeletedBy")
  createdLevels              Level[]             @relation("LevelCreatedBy")
  updatedLevels              Level[]             @relation("LevelUpdatedBy")
  deletedLevels              Level[]             @relation("LevelDeletedBy")
  createdRewards             Reward[]            @relation("RewardCreatedBy")
  updatedRewards             Reward[]            @relation("RewardUpdatedBy")
  deletedRewards             Reward[]            @relation("RewardDeletedBy")
  createdVocabularies        Vocabulary[]        @relation("VocabularyCreatedBy")
  createdLessons             Lesson[]            @relation("LessonCreatedBy")
  createdPokemons            Pokemon[]           @relation("PokemonCreatedBy")
  updatedPokemons            Pokemon[]           @relation("PokemonUpdatedBy")
  deletedPokemons            Pokemon[]           @relation("PokemonDeletedBy")
  createdElementalTypes      ElementalType[]     @relation("ElementalTypeCreatedBy")
  updatedElementalTypes      ElementalType[]     @relation("ElementalTypeUpdatedBy")
  deletedElementalTypes      ElementalType[]     @relation("ElementalTypeDeletedBy")
  createdTypeEffectivenesses TypeEffectiveness[] @relation("TypeEffectivenessCreatedBy")
  updatedTypeEffectivenesses TypeEffectiveness[] @relation("TypeEffectivenessUpdatedBy")
  deletedTypeEffectivenesses TypeEffectiveness[] @relation("TypeEffectivenessDeletedBy")
  createdDailyRequest        DailyRequest[]      @relation("DailyRequestCreatedBy")
  updatedDailyRequest        DailyRequest[]      @relation("DailyRequestUpdatedBy")
  deletedDailyRequest        DailyRequest[]      @relation("DailyRequestDeletedBy")
  createdUserDailyRequest    UserDailyRequest[]  @relation("UserDailyRequestCreatedBy")
  updatedUserDailyRequest    UserDailyRequest[]  @relation("UserDailyRequestUpdatedBy")
  deletedUserDailyRequest    UserDailyRequest[]  @relation("UserDailyRequestDeletedBy")
  createdAchievements        Achievement[]       @relation("AchievementCreatedBy")
  updatedAchievements        Achievement[]       @relation("AchievementUpdatedBy")
  deletedAchievements        Achievement[]       @relation("AchievementDeletedBy")
  createdUserAchievements    UserAchievement[]   @relation("UserAchievementCreatedBy")
  updatedUserAchievements    UserAchievement[]   @relation("UserAchievementUpdatedBy")
  deletedUserAchievements    UserAchievement[]   @relation("UserAchievementDeletedBy")
  createdAchievementGroups   AchievementGroup[]  @relation("AchievementGroupCreatedBy")
  updatedAchievementGroups   AchievementGroup[]  @relation("AchievementGroupUpdatedBy")
  deletedAchievementGroups   AchievementGroup[]  @relation("AchievementGroupDeletedBy")

  // 1 user có thể tạo ra nhiều user khác
  // 1 user chỉ có thể được tạo ra bởi 1 user khác
  // Tự quan hệ 1-n
  devices           Device[] // Liên kết 1-n với Device
  refreshTokens     RefreshToken[]
  userDailyRequests UserDailyRequest[]
  userPokemons      UserPokemon[]
  userAchievements  UserAchievement[]

  createdById  Int?
  createdBy    User?  @relation("CreatorUsers", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  createdUsers User[] @relation("CreatorUsers")

  updatedById  Int?
  updatedBy    User?  @relation("UpdatorUsers", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedUsers User[] @relation("UpdatorUsers")
  deletedById  Int?
  deletedBy    User?  @relation("DeletorUsers", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedUsers User[] @relation("DeletorUsers")

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Device {
  id            Int            @id @default(autoincrement())
  userId        Int
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userAgent     String
  ip            String
  lastActive    DateTime       @updatedAt // Thay updatedAt bằng lastActive cho ý nghĩa rõ hơn
  createdAt     DateTime       @default(now())
  isActive      Boolean        @default(true) // Trạng thái thiết bị (đang login hay đã logout)
  refreshTokens RefreshToken[] // Liên kết 1-n với RefreshToken
}

model RefreshToken {
  token     String   @unique @db.VarChar(1000)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  deviceId  Int // Foreign key tới Device
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
}

model Permission {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(500)
  description String     @default("")
  path        String     @db.VarChar(1000)
  method      HTTPMethod
  module      String     @default("") @db.VarChar(500)
  roles       Role[]

  createdById Int?
  createdBy   User? @relation("PermissionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("PermissionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("PermissionDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(500)
  description String       @default("")
  isActive    Boolean      @default(true)
  permissions Permission[]
  users       User[]

  createdById Int?
  createdBy   User? @relation("RoleCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("RoleUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("RoleDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

// Model Languages (Quản lý các ngôn ngữ được hỗ trợ)
model Languages {
  id   Int    @id @default(autoincrement())
  code String @unique @db.VarChar(10) // Mã ngôn ngữ (vi, en, ja, etc.)
  name String @db.VarChar(100) // Tên ngôn ngữ (Vietnamese, English, Japanese, etc.)

  // Quan hệ với Translation
  translations Translation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([code])
}

// Model Translation (Hệ thống đa ngôn ngữ tập trung)
model Translation {
  id         Int    @id @default(autoincrement())
  languageId Int // Foreign key đến Languages.id
  key        String @db.VarChar(500) // Key định danh duy nhất
  value      String @db.VarChar(2000) // Nội dung đã dịch

  // Quan hệ với Languages
  language Languages @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([languageId, key]) // Cặp (languageId, key) phải duy nhất
  @@index([languageId])
  @@index([key])
}

// Model WordType (Loại từ)
model WordType {
  id           Int          @id @default(autoincrement())
  nameKey      String       @unique @db.VarChar(100) // Key để dịch tên loại từ
  vocabularies Vocabulary[] // Quan hệ Một-Nhiều với Vocabulary
  meanings     Meaning[] // Quan hệ Một-Nhiều với Meaning

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([nameKey])
}

// Model Kanji (Thư viện Kanji)
model Kanji {
  id           Int                @id @default(autoincrement())
  character    String             @unique @db.VarChar(10) // Một ký tự Kanji duy nhất
  meaningKey   String             @db.VarChar(200) // Key để dịch nghĩa của Kanji
  strokeCount  Int? // Số nét vẽ
  jlptLevel    Int? // Cấp độ JLPT (1-5)
  img          String?            @db.VarChar(500) // URL hình ảnh của Kanji
  vocabularies Vocabulary_Kanji[] // Quan hệ Nhiều-Nhiều với Vocabulary
  readings     Kanji_Reading[] // Quan hệ Một-Nhiều với Kanji_Reading

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([character])
  @@index([meaningKey])
  @@index([jlptLevel])
}

// Model Kanji_Reading (Cách đọc Kanji)
model Kanji_Reading {
  id          Int    @id @default(autoincrement())
  kanjiId     Int // Khóa ngoại, liên kết đến Kanji
  kanji       Kanji  @relation(fields: [kanjiId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  readingType String @db.VarChar(20) // Loại cách đọc (onyomi, kunyomi, nanori, etc.)
  reading     String @db.VarChar(100) // Cách đọc cụ thể

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([kanjiId])
  @@index([readingType])
  @@index([reading])
}

// Model Meaning (Nghĩa của từ)
model Meaning {
  id           Int        @id @default(autoincrement())
  vocabularyId Int // Khóa ngoại, liên kết đến Vocabulary
  vocabulary   Vocabulary @relation(fields: [vocabularyId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  wordTypeId   Int? // Khóa ngoại, liên kết đến WordType
  wordType     WordType?  @relation(fields: [wordTypeId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  // Translation keys
  meaningKey         String? @db.VarChar(500) // Key để dịch nghĩa
  exampleSentenceKey String? @db.VarChar(500) // Key để dịch câu ví dụ
  explanationKey     String? @db.VarChar(500) // Key để dịch giải thích

  exampleSentenceJp String? @db.VarChar(1000) // Câu ví dụ tiếng Nhật

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([vocabularyId])
  @@index([wordTypeId])
  @@index([meaningKey])
  @@index([exampleSentenceKey])
  @@index([explanationKey])
}

// Model Vocabulary_Kanji (Bảng nối)
model Vocabulary_Kanji {
  vocabularyId Int // Khóa ngoại, liên kết đến Vocabulary
  vocabulary   Vocabulary @relation(fields: [vocabularyId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  kanjiId      Int // Khóa ngoại, liên kết đến Kanji
  kanji        Kanji      @relation(fields: [kanjiId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  displayOrder Int // Thứ tự xuất hiện của Kanji trong từ vựng

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([vocabularyId, kanjiId])
  @@index([vocabularyId])
  @@index([kanjiId])
}

// Model Vocabulary (Cập nhật)
model Vocabulary {
  id         Int       @id @default(autoincrement())
  wordJp     String    @db.VarChar(500) // Từ vựng viết bằng Kanji
  reading    String    @db.VarChar(500) // Cách đọc bằng Hiragana
  imageUrl   String?   @db.VarChar(1000)
  audioUrl   String?   @db.VarChar(1000)
  levelN     Int? // Cấp độ JLPT của từ
  wordTypeId Int? // Khóa ngoại, liên kết đến WordType
  wordType   WordType? @relation(fields: [wordTypeId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  // Quan hệ với các model mới
  meanings Meaning[] // Quan hệ Một-Nhiều với Meaning
  kanji    Vocabulary_Kanji[] // Quan hệ Một-Nhiều với bảng nối Vocabulary_Kanji

  // Audit fields
  createdById Int?
  createdBy   User? @relation("VocabularyCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([wordJp])
  @@index([reading])
  @@index([levelN])
  @@index([wordTypeId])
}

model Reward {
  id           Int          @id @default(autoincrement())
  name         String
  rewardType   RewardType   @default(LESSON)
  rewardItem   Int
  rewardTarget RewardTarget @default(EXP)

  // Quan hệ với Level
  levels Level[]

  // Quan hệ với Lesson
  lessons Lesson[]

  // Audit fields
  createdById Int?
  createdBy   User? @relation("RewardCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("RewardUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("RewardDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  // Timestamps
  deletedAt    DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  DailyRequest DailyRequest[]
  Achievement  Achievement[]
}

model Level {
  id Int @id @default(autoincrement())

  levelNumber Int
  requiredExp Int
  levelType   LevelType

  // Self relation: next level
  nextLevelId Int?
  nextLevel   Level?  @relation("NextLevel", fields: [nextLevelId], references: [id])
  prevLevels  Level[] @relation("NextLevel")

  // Reward relation
  rewardId Int?
  reward   Reward? @relation(fields: [rewardId], references: [id])

  users        User[]
  userPokemons UserPokemon[]

  createdById Int?
  createdBy   User? @relation("LevelCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("LevelUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("LevelDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([levelNumber, levelType])
  @@index([deletedAt])
}

model Pokemon {
  id               Int           @id @default(autoincrement())
  pokedex_number   Int
  nameJp           String
  nameTranslations Json // {"en": "...", "ja": "...", "vi": "..."}
  description      String?
  conditionLevel   Int?
  isStarted        Boolean       @default(false)
  imageUrl         String?
  rarity           RarityPokemon @default(COMMON)

  // Quan hệ nhiều-nhiều với hệ
  types ElementalType[]

  // Self relation: tiến hóa
  nextPokemons     Pokemon[] @relation("PokemonEvolutions")
  previousPokemons Pokemon[] @relation("PokemonEvolutions")

  userPokemons UserPokemon[]

  //
  createdById Int?
  createdBy   User? @relation("PokemonCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("PokemonUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("PokemonDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model UserPokemon {
  id Int @id @default(autoincrement())

  // Quan hệ
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  pokemonId Int
  pokemon   Pokemon @relation(fields: [pokemonId], references: [id], onDelete: NoAction)

  levelId Int
  level   Level @relation(fields: [levelId], references: [id], onDelete: NoAction)

  // Thông tin cá nhân hóa
  nickname  String? // tên user đặt cho con này
  exp       Int     @default(0) // exp hiện tại trên con này
  isEvolved Boolean @default(false) // đã tiến hóa chưa
  isMain    Boolean @default(false) // có phải con chính không

  // Timestamps
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
  @@index([pokemonId])
}

model ElementalType {
  id           Int      @id @default(autoincrement())
  type_name    String   @unique @db.VarChar(20) // Fire, Water...
  display_name Json // {"en": "Fire", "vi": "Lửa", "ja": "ほのお"}
  color_hex    String   @db.VarChar(7) // #EE8130
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Quan hệ nhiều-nhiều với Pokémon
  pokemons Pokemon[]

  // Quan hệ tấn công / phòng thủ
  attacking_relations TypeEffectiveness[] @relation("Attacker")
  defending_relations TypeEffectiveness[] @relation("Defender")

  //
  createdById Int?
  createdBy   User? @relation("ElementalTypeCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("ElementalTypeUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("ElementalTypeDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model TypeEffectiveness {
  id         Int   @id @default(autoincrement())
  attackerId Int
  defenderId Int
  multiplier Float // 0, 0.5, 1, 2

  attacker ElementalType @relation("Attacker", fields: [attackerId], references: [id])
  defender ElementalType @relation("Defender", fields: [defenderId], references: [id])

  //
  createdById Int?
  createdBy   User? @relation("TypeEffectivenessCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("TypeEffectivenessUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("TypeEffectivenessDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([attackerId, defenderId]) // tránh trùng
}

// Model LessonCategory (Danh mục bài học)
model LessonCategory {
  id        Int      @id @default(autoincrement())
  nameKey   String   @unique @db.VarChar(200) // Key để dịch tên danh mục
  slug      String   @unique @db.VarChar(200) // URL slug cho danh mục
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Quan hệ với Lesson
  lessons Lesson[]

  @@index([nameKey])
  @@index([slug])
}

// Model Lesson (Bài học)
model Lesson {
  id                   Int       @id @default(autoincrement())
  slug                 String    @unique @db.VarChar(200) // URL slug cho bài học
  titleJp              String    @db.VarChar(500) // Tiêu đề bài học bằng tiếng Nhật
  titleKey             String    @db.VarChar(500) // Key để dịch tiêu đề bài học
  levelJlpt            Int? // Cấp độ JLPT (1-5)
  estimatedTimeMinutes Int       @default(30) // Thời gian ước tính hoàn thành (phút)
  lessonOrder          Int       @default(0) // Thứ tự bài học trong danh mục
  isPublished          Boolean   @default(false) // Trạng thái xuất bản
  publishedAt          DateTime? // Thời gian xuất bản
  version              String    @default("1.0.0") @db.VarChar(20) // Phiên bản bài học
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Quan hệ với LessonCategory
  lessonCategoryId Int
  lessonCategory   LessonCategory @relation(fields: [lessonCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // Quan hệ với Reward
  rewardId Int?
  reward   Reward? @relation(fields: [rewardId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  // Quan hệ với User (created_by)
  createdById Int
  createdBy   User @relation("LessonCreatedBy", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // Quan hệ với LessonContents
  lessonContents LessonContents[]

  // Quan hệ với Exercises
  exercises Exercises[]

  @@index([slug])
  @@index([titleKey])
  @@index([levelJlpt])
  @@index([lessonCategoryId])
  @@index([lessonOrder])
  @@index([isPublished])
  @@index([publishedAt])
}

// Model LessonContents (Nội dung bài học)
model LessonContents {
  id           Int      @id @default(autoincrement())
  lessonId     Int // Foreign key đến Lesson
  contentId    Int // Polymorphic foreign key
  contentType  String   @db.VarChar(50) // Loại nội dung (vocabulary, grammar, kanji, etc.)
  contentOrder Int      @default(0) // Thứ tự nội dung trong bài học
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Quan hệ với Lesson
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Polymorphic relationships (sẽ được xử lý trong service layer)
  // contentId có thể trỏ đến Vocabulary.ID, Grammar.ID, hoặc Kanji.ID
  // tùy thuộc vào giá trị của contentType

  @@index([lessonId])
  @@index([contentId])
  @@index([contentType])
  @@index([contentOrder])
}

// Model Exercises (Bài tập)
model Exercises {
  id           Int      @id @default(autoincrement())
  exerciseType String   @db.VarChar(100) // Loại bài tập (multiple_choice, fill_blank, etc.)
  content      String?  @db.Text // Nội dung mô tả bài tập
  audioUrl     String?  @db.VarChar(1000) // URL file âm thanh
  isBlocked    Boolean  @default(false) // Trạng thái bị chặn
  price        Decimal? @db.Decimal(10, 2) // Giá bài tập (nếu có)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Quan hệ với Lesson
  lessonId Int
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Quan hệ với Question
  questions Question[]

  @@index([lessonId])
  @@index([exerciseType])
  @@index([isBlocked])
}

// Model Question (Câu hỏi)
model Question {
  id            Int      @id @default(autoincrement())
  questionJp    String   @db.VarChar(1000) // Nội dung câu hỏi bằng tiếng Nhật
  questionOrder Int      @default(0) // Thứ tự câu hỏi trong bài tập
  questionKey   String   @db.VarChar(200) // Key để dịch câu hỏi
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Quan hệ với Exercises
  exercisesId Int
  exercises   Exercises @relation(fields: [exercisesId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Quan hệ với Answer
  answers Answer[]

  @@index([exercisesId])
  @@index([questionOrder])
  @@index([questionKey])
}

// Model Answer (Câu trả lời)
model Answer {
  id        Int      @id @default(autoincrement())
  answerJp  String   @db.VarChar(1000) // Nội dung câu trả lời bằng tiếng Nhật
  answerKey String   @db.VarChar(200) // Key để dịch câu trả lời
  isCorrect Boolean  @default(false) // Đánh dấu câu trả lời đúng
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Quan hệ với Question
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([questionId])
  @@index([answerKey])
  @@index([isCorrect])
}

model Grammar {
  id        Int      @id @default(autoincrement())
  structure String   @db.VarChar(500)
  level     String   @db.VarChar(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  usages GrammarUsage[]

  @@index([level])
  @@index([structure])
}

model GrammarUsage {
  id                 Int      @id @default(autoincrement())
  grammarId          Int
  explanationKey     String   @db.VarChar(200)
  exampleSentenceJp  String   @db.VarChar(1000)
  exampleSentenceKey String   @db.VarChar(200)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  grammar Grammar @relation(fields: [grammarId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([grammarId])
  @@index([explanationKey])
}

model DailyRequest {
  id             Int                @id @default(autoincrement())
  nameKey        String             @db.VarChar(200)
  descriptionKey String             @db.VarChar(500)
  conditionType  DailyConditionType // Loại điều kiện (LOGIN, COMPLETE_LESSON, STREAK_LOGIN, ...)
  conditionValue Int // Giá trị cần đạt (VD: 1, 7, ...)
  rewardId       Int? // Liên kết tới Reward
  reward         Reward?            @relation(fields: [rewardId], references: [id], onDelete: SetNull)
  isActive       Boolean            @default(true)

  userDailyRequests UserDailyRequest[]

  //
  createdById Int?
  createdBy   User? @relation("DailyRequestCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("DailyRequestUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("DailyRequestDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model UserDailyRequest {
  id             Int          @id @default(autoincrement())
  userId         Int
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  dailyRequestId Int
  dailyRequest   DailyRequest @relation(fields: [dailyRequestId], references: [id], onDelete: Cascade)
  progress       Int          @default(0) // Tiến độ hiện tại
  isCompleted    Boolean      @default(false)
  completedAt    DateTime?
  date           DateTime // Ngày của nhiệm vụ (ví dụ: 2025-10-12)
  //
  createdById    Int?
  createdBy      User?        @relation("UserDailyRequestCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById    Int?
  updatedBy      User?        @relation("UserDailyRequestUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById    Int?
  deletedBy      User?        @relation("UserDailyRequestDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, dailyRequestId, date])
}

// === BẢNG ĐỊNH NGHĨA TOÀN BỘ HUY HIỆU ===
model AchievementGroup {
  id             Int    @id @default(autoincrement())
  nameKey        String
  descriptionKey String // Mô tả, VD: "Dành cho người mới tham gia"
  displayOrder   Int // Thứ tự hiển thị, VD: 1, 2, 3...

  // Quan hệ: Một nhóm có thể chứa nhiều huy hiệu
  achievements Achievement[]

  createdById Int?
  createdBy   User? @relation("AchievementGroupCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("AchievementGroupUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("AchievementGroupDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Achievement {
  id Int @id @default(autoincrement())

  // Thông tin cơ bản
  nameKey        String // Tên huy hiệu, VD: "Ngọn Lửa Nhỏ"
  descriptionKey String // Mô tả chi tiết
  imageUrl       String? // Đường dẫn tới ảnh của huy hiệu

  // Phân loại & Hiển thị
  achievementTierType AchievementTierType?
  // Điều kiện để nhận
  conditionType       AchievementType // Loại điều kiện, VD: LEARNING_STREAK
  conditionValue      Int? // Giá trị cần đạt, VD: 3 (cho 3 ngày)
  conditionMeta       Json? // Dữ liệu phức tạp, VD: {"pokemon_type": "FIRE"} hoặc {"pokemon_name": "Charizard"}

  // Phần thưởng (nếu có)
  rewardId Int? // Liên kết tới bảng Reward
  reward   Reward? @relation(fields: [rewardId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  groupId Int
  group   AchievementGroup @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Quan hệ: Một huy hiệu có thể được nhiều user sở hữu
  userAchievements UserAchievement[]

  createdById Int?
  createdBy   User? @relation("AchievementCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("AchievementUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("AchievementDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model UserAchievement {
  id Int @id @default(autoincrement())

  // Liên kết tới User nào?
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Liên kết tới Huy hiệu nào?
  achievementId Int
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Thông tin thêm
  achievedAt      DateTime @default(now()) // Thời điểm nhận được huy hiệu
  isRewardClaimed Boolean  @default(false) // Đã nhận quà của huy hiệu này chưa?

  createdById Int?
  createdBy   User? @relation("UserAchievementCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("UserAchievementUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("UserAchievementDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Đảm bảo một user chỉ nhận 1 huy hiệu 1 lần duy nhất
  @@unique([userId, achievementId])
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

enum MediaType {
  IMAGE
  VIDEO
}

enum LevelType {
  USER
  POKEMON
}

enum RewardType {
  LESSON
  DAILY_REQUEST
  EVENT
  ACHIEVEMENT
  LEVEL
}

enum RewardTarget {
  EXP
  POINT
  POKEMON
  BADGE
  VOUCHER
}

enum RarityPokemon {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

enum DailyConditionType {
  LOGIN // Đăng nhập hằng ngày
  COMPLETE_LESSON // Hoàn thành 1 bài học
  EXCERCISE
  STREAK_LOGIN // Đăng nhập liên tục X ngày
  STREAK_COMPLETE_LESSON // Hoàn thành liên tục X bài học
  STREAK_EXERCISE // Hoàn thành liên tục X bài tập
}

enum AchievementTierType {
  BASIC // Cơ bản
  INTERMEDIATE // Trung cấp
  ADVANCED // Nâng cao
  MASTER // Cao thủ
}

enum AchievementType {
  COMPLETE_LESSON // Hoàn thành bài học (value: 1 = bài đầu tiên)
  CHOOSE_STARTER_POKEMON // Chọn Pokémon khởi đầu
  PLACEMENT_TEST_DONE // Hoàn thành bài kiểm tra đầu vào
  LEARNING_STREAK // Chuỗi ngày học (value: 3, 7, 30, 100)
  CAPTURE_POKEMON_COUNT // Sở hữu X Pokémon (value: 10)
  CAPTURE_TYPE_COLLECTION // Thu thập đủ Pokémon 1 hệ (meta: {"type": "GRASS"})
  CAPTURE_ALL_POKEMON // Hoàn thành Pokédex (value: 151)
  CAPTURE_LEGENDARY // Bắt được Pokémon huyền thoại
  EVOLVE_POKEMON_FINAL // Tiến hóa Pokémon lên dạng cuối (meta: {"pokemon_name": "Charizard"})
}
