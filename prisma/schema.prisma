generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         Int                 @id @default(autoincrement())
  email                      String              @unique @db.VarChar(500)
  name                       String              @db.VarChar(500)
  password                   String              @db.VarChar(500)
  phoneNumber                String?             @db.VarChar(11)
  avatar                     String?             @db.VarChar(1000)
  status                     UserStatus          @default(INACTIVE)
  roleId                     Int
  role                       Role                @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  levelId                    Int?
  level                      Level?              @relation(fields: [levelId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  devices                    Device[] // Liên kết 1-n với Device
  refreshTokens              RefreshToken[]
  createdPermissions         Permission[]        @relation("PermissionCreatedBy")
  updatedPermissions         Permission[]        @relation("PermissionUpdatedBy")
  deletedPermissions         Permission[]        @relation("PermissionDeletedBy")
  createdRoles               Role[]              @relation("RoleCreatedBy")
  updatedRoles               Role[]              @relation("RoleUpdatedBy")
  deletedRoles               Role[]              @relation("RoleDeletedBy")
  createdLevels              Level[]             @relation("LevelCreatedBy")
  updatedLevels              Level[]             @relation("LevelUpdatedBy")
  deletedLevels              Level[]             @relation("LevelDeletedBy")
  createdRewards             Reward[]            @relation("RewardCreatedBy")
  updatedRewards             Reward[]            @relation("RewardUpdatedBy")
  deletedRewards             Reward[]            @relation("RewardDeletedBy")
  createdVocabularies        Vocabulary[]        @relation("VocabularyCreatedBy")
  createdPokemons            Pokemon[]           @relation("PokemonCreatedBy")
  updatedPokemons            Pokemon[]           @relation("PokemonUpdatedBy")
  deletedPokemons            Pokemon[]           @relation("PokemonDeletedBy")
  createdElementalTypes      ElementalType[]     @relation("ElementalTypeCreatedBy")
  updatedElementalTypes      ElementalType[]     @relation("ElementalTypeUpdatedBy")
  deletedElementalTypes      ElementalType[]     @relation("ElementalTypeDeletedBy")
  createdTypeEffectivenesses TypeEffectiveness[] @relation("TypeEffectivenessCreatedBy")
  updatedTypeEffectivenesses TypeEffectiveness[] @relation("TypeEffectivenessUpdatedBy")
  deletedTypeEffectivenesses TypeEffectiveness[] @relation("TypeEffectivenessDeletedBy")

  // 1 user có thể tạo ra nhiều user khác
  // 1 user chỉ có thể được tạo ra bởi 1 user khác
  // Tự quan hệ 1-n
  userPokemons UserPokemon[]

  createdById  Int?
  createdBy    User?  @relation("CreatorUsers", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  createdUsers User[] @relation("CreatorUsers")

  updatedById  Int?
  updatedBy    User?  @relation("UpdatorUsers", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedUsers User[] @relation("UpdatorUsers")
  deletedById  Int?
  deletedBy    User?  @relation("DeletorUsers", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedUsers User[] @relation("DeletorUsers")

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Device {
  id            Int            @id @default(autoincrement())
  userId        Int
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userAgent     String
  ip            String
  lastActive    DateTime       @updatedAt // Thay updatedAt bằng lastActive cho ý nghĩa rõ hơn
  createdAt     DateTime       @default(now())
  isActive      Boolean        @default(true) // Trạng thái thiết bị (đang login hay đã logout)
  refreshTokens RefreshToken[] // Liên kết 1-n với RefreshToken
}

model RefreshToken {
  token     String   @unique @db.VarChar(1000)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  deviceId  Int // Foreign key tới Device
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
}

model Permission {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(500)
  description String     @default("")
  path        String     @db.VarChar(1000)
  method      HTTPMethod
  module      String     @default("") @db.VarChar(500)
  roles       Role[]

  createdById Int?
  createdBy   User? @relation("PermissionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("PermissionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("PermissionDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(500)
  description String       @default("")
  isActive    Boolean      @default(true)
  permissions Permission[]
  users       User[]

  createdById Int?
  createdBy   User? @relation("RoleCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("RoleUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("RoleDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

// Model Languages (Quản lý các ngôn ngữ được hỗ trợ)
model Languages {
  id   Int    @id @default(autoincrement())
  code String @unique @db.VarChar(10) // Mã ngôn ngữ (vi, en, ja, etc.)
  name String @db.VarChar(100) // Tên ngôn ngữ (Vietnamese, English, Japanese, etc.)

  // Quan hệ với Translation
  translations Translation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([code])
}

// Model Translation (Hệ thống đa ngôn ngữ tập trung)
model Translation {
  id         Int    @id @default(autoincrement())
  languageId Int // Foreign key đến Languages.id
  key        String @db.VarChar(500) // Key định danh duy nhất
  value      String @db.VarChar(2000) // Nội dung đã dịch

  // Quan hệ với Languages
  language Languages @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([languageId, key]) // Cặp (languageId, key) phải duy nhất
  @@index([languageId])
  @@index([key])
}

// Model WordType (Loại từ)
model WordType {
  id           Int          @id @default(autoincrement())
  nameKey      String       @unique @db.VarChar(100) // Key để dịch tên loại từ
  vocabularies Vocabulary[] // Quan hệ Một-Nhiều với Vocabulary
  meanings     Meaning[] // Quan hệ Một-Nhiều với Meaning

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([nameKey])
}

// Model Kanji (Thư viện Kanji)
model Kanji {
  id           Int                @id @default(autoincrement())
  character    String             @unique @db.VarChar(10) // Một ký tự Kanji duy nhất
  meaningKey   String             @db.VarChar(200) // Key để dịch nghĩa của Kanji
  strokeCount  Int? // Số nét vẽ
  jlptLevel    Int? // Cấp độ JLPT (1-5)
  vocabularies Vocabulary_Kanji[] // Quan hệ Nhiều-Nhiều với Vocabulary
  readings     Kanji_Reading[] // Quan hệ Một-Nhiều với Kanji_Reading

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([character])
  @@index([meaningKey])
  @@index([jlptLevel])
}

// Model Kanji_Reading (Cách đọc Kanji)
model Kanji_Reading {
  id          Int    @id @default(autoincrement())
  kanjiId     Int // Khóa ngoại, liên kết đến Kanji
  kanji       Kanji  @relation(fields: [kanjiId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  readingType String @db.VarChar(20) // Loại cách đọc (onyomi, kunyomi, nanori, etc.)
  reading     String @db.VarChar(100) // Cách đọc cụ thể

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([kanjiId])
  @@index([readingType])
  @@index([reading])
}

// Model Meaning (Nghĩa của từ)
model Meaning {
  id           Int        @id @default(autoincrement())
  vocabularyId Int // Khóa ngoại, liên kết đến Vocabulary
  vocabulary   Vocabulary @relation(fields: [vocabularyId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  wordTypeId   Int? // Khóa ngoại, liên kết đến WordType
  wordType     WordType?  @relation(fields: [wordTypeId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  // Translation keys
  meaningKey         String? @db.VarChar(500) // Key để dịch nghĩa
  exampleSentenceKey String? @db.VarChar(500) // Key để dịch câu ví dụ
  explanationKey     String? @db.VarChar(500) // Key để dịch giải thích

  exampleSentenceJp String? @db.VarChar(1000) // Câu ví dụ tiếng Nhật

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([vocabularyId])
  @@index([wordTypeId])
  @@index([meaningKey])
  @@index([exampleSentenceKey])
  @@index([explanationKey])
}

// Model Vocabulary_Kanji (Bảng nối)
model Vocabulary_Kanji {
  vocabularyId Int // Khóa ngoại, liên kết đến Vocabulary
  vocabulary   Vocabulary @relation(fields: [vocabularyId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  kanjiId      Int // Khóa ngoại, liên kết đến Kanji
  kanji        Kanji      @relation(fields: [kanjiId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  displayOrder Int // Thứ tự xuất hiện của Kanji trong từ vựng

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([vocabularyId, kanjiId])
  @@index([vocabularyId])
  @@index([kanjiId])
}

// Model Vocabulary (Cập nhật)
model Vocabulary {
  id         Int       @id @default(autoincrement())
  wordJp     String    @db.VarChar(500) // Từ vựng viết bằng Kanji
  reading    String    @db.VarChar(500) // Cách đọc bằng Hiragana
  imageUrl   String?   @db.VarChar(1000)
  audioUrl   String?   @db.VarChar(1000)
  levelN     Int? // Cấp độ JLPT của từ
  wordTypeId Int? // Khóa ngoại, liên kết đến WordType
  wordType   WordType? @relation(fields: [wordTypeId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  // Quan hệ với các model mới
  meanings Meaning[] // Quan hệ Một-Nhiều với Meaning
  kanji    Vocabulary_Kanji[] // Quan hệ Một-Nhiều với bảng nối Vocabulary_Kanji

  // Audit fields
  createdById Int?
  createdBy   User? @relation("VocabularyCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([wordJp])
  @@index([reading])
  @@index([levelN])
  @@index([wordTypeId])
}

model Reward {
  id           Int          @id @default(autoincrement())
  name         String
  rewardType   RewardType   @default(LESSON)
  rewardItem   Int
  rewardTarget RewardTarget @default(EXP)

  // Quan hệ với Level
  levels Level[]

  // Audit fields
  createdById Int?
  createdBy   User? @relation("RewardCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("RewardUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("RewardDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  // Timestamps
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Level {
  id Int @id @default(autoincrement())

  levelNumber Int
  requiredExp Int
  levelType   LevelType

  // Self relation: next level
  nextLevelId Int?
  nextLevel   Level?  @relation("NextLevel", fields: [nextLevelId], references: [id])
  prevLevels  Level[] @relation("NextLevel")

  // Reward relation
  rewardId Int?
  reward   Reward? @relation(fields: [rewardId], references: [id])

  users        User[]
  userPokemons UserPokemon[]

  createdById Int?
  createdBy   User? @relation("LevelCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("LevelUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("LevelDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([levelNumber, levelType])
  @@index([deletedAt])
}

model Pokemon {
  id               Int           @id @default(autoincrement())
  pokedex_number   Int
  nameJp           String
  nameTranslations Json // {"en": "...", "ja": "...", "vi": "..."}
  description      String?
  conditionLevel   Int?
  nextPokemonId    Int?
  isStarted        Boolean       @default(false)
  imageUrl         String?
  rarity           RarityPokemon @default(COMMON)

  // Quan hệ nhiều-nhiều với hệ
  types ElementalType[]

  // Self relation: tiến hóa
  nextPokemon      Pokemon?  @relation("Evolution", fields: [nextPokemonId], references: [id])
  previousPokemons Pokemon[] @relation("Evolution")

  userPokemons UserPokemon[]

  //
  createdById Int?
  createdBy   User? @relation("PokemonCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("PokemonUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("PokemonDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model UserPokemon {
  id Int @id @default(autoincrement())

  // Quan hệ
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  pokemonId Int
  pokemon   Pokemon @relation(fields: [pokemonId], references: [id], onDelete: NoAction)

  levelId Int
  level   Level @relation(fields: [levelId], references: [id], onDelete: NoAction)

  // Thông tin cá nhân hóa
  nickname String? // tên user đặt cho con này
  exp      Int     @default(0) // exp hiện tại trên con này

  // Timestamps
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, nickname]) // optional: mỗi user không có 2 con trùng nickname (NULL cho phép)
  @@index([userId])
  @@index([pokemonId])
}

model ElementalType {
  id           Int      @id @default(autoincrement())
  type_name    String   @unique @db.VarChar(20) // Fire, Water...
  display_name Json // {"en": "Fire", "vi": "Lửa", "ja": "ほのお"}
  color_hex    String   @db.VarChar(7) // #EE8130
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Quan hệ nhiều-nhiều với Pokémon
  pokemons Pokemon[]

  // Quan hệ tấn công / phòng thủ
  attacking_relations TypeEffectiveness[] @relation("Attacker")
  defending_relations TypeEffectiveness[] @relation("Defender")

  //
  createdById Int?
  createdBy   User? @relation("ElementalTypeCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("ElementalTypeUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("ElementalTypeDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model TypeEffectiveness {
  id         Int   @id @default(autoincrement())
  attackerId Int
  defenderId Int
  multiplier Float // 0, 0.5, 1, 2

  attacker ElementalType @relation("Attacker", fields: [attackerId], references: [id])
  defender ElementalType @relation("Defender", fields: [defenderId], references: [id])

  //
  createdById Int?
  createdBy   User? @relation("TypeEffectivenessCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("TypeEffectivenessUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("TypeEffectivenessDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([attackerId, defenderId]) // tránh trùng
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

enum MediaType {
  IMAGE
  VIDEO
}

enum LevelType {
  USER
  POKEMON
}

enum RewardType {
  LESSON
  DAILY_REQUEST
  EVENT
  ACHIEVEMENT
  LEVEL
}

enum RewardTarget {
  EXP
  POINT
  POKEMON
  BADGE
  VOUCHER
}

enum RarityPokemon {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}
