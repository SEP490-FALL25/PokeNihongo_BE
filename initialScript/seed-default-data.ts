import { NestFactory } from '@nestjs/core'
import { AppModule } from '../src/app.module'
import { KanjiService } from '../src/modules/kanji/kanji.service'
import { VocabularyService } from '../src/modules/vocabulary/vocabulary.service'

const main = async () => {
    console.log('üå± B·∫Øt ƒë·∫ßu ch·∫°y seed data...')

    const app = await NestFactory.createApplicationContext(AppModule)
    const kanjiService = app.get(KanjiService)
    const vocabularyService = app.get(VocabularyService)

    try {
        // 1. T·∫°o Kanji N5 c∆° b·∫£n
        console.log('\nüìù ƒêang t·∫°o c√°c Kanji N5...')

        const kanjiData = [
            {
                character: 'Êó•',
                strokeCount: 4,
                jlptLevel: 5,
                readings: [
                    { readingType: 'onyomi', reading: '„Éã„ÉÅ' },
                    { readingType: 'kunyomi', reading: '„Å≤' }
                ],
                meanings: {
                    translations: {
                        vi: 'm·∫∑t tr·ªùi, ng√†y',
                        en: 'sun, day'
                    }
                }
            },
            {
                character: 'Êú¨',
                strokeCount: 5,
                jlptLevel: 5,
                readings: [
                    { readingType: 'onyomi', reading: '„Éõ„É≥' },
                    { readingType: 'kunyomi', reading: '„ÇÇ„Å®' }
                ],
                meanings: {
                    translations: {
                        vi: 'g·ªëc, s√°ch',
                        en: 'origin, book'
                    }
                }
            },
            {
                character: 'Ë™û',
                strokeCount: 14,
                jlptLevel: 5,
                readings: [
                    { readingType: 'onyomi', reading: '„Ç¥' },
                    { readingType: 'kunyomi', reading: '„Åã„Åü.„Çã' }
                ],
                meanings: {
                    translations: {
                        vi: 'ng√¥n ng·ªØ, n√≥i',
                        en: 'language, speak'
                    }
                }
            }
        ]

        for (const kanji of kanjiData) {
            try {
                await kanjiService.createWithMeanings(kanji)
                console.log(`‚úÖ T·∫°o Kanji: ${kanji.character}`)
            } catch (error) {
                console.log(`‚ö†Ô∏è  Kanji ${kanji.character} c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i`)
            }
        }

        console.log('‚úÖ Ho√†n th√†nh t·∫°o Kanji N5!')

        // 2. T·∫°o t·ª´ v·ª±ng b√†i 1 Minna no Nihongo
        console.log('\nüìö ƒêang t·∫°o t·ª´ v·ª±ng b√†i 1...')

        const vocabularyData = [
            {
                word_jp: '„Åì„Çì„Å´„Å°„ÅØ',
                reading: '„Åì„Çì„Å´„Å°„ÅØ',
                level_n: 5,
                word_type_id: 1, // Assuming greeting word type
                translations: {
                    meaning: [
                        { language_code: 'vi', value: 'Xin ch√†o' },
                        { language_code: 'en', value: 'Hello' }
                    ]
                }
            },
            {
                word_jp: '„ÅÇ„Çä„Åå„Å®„ÅÜ',
                reading: '„ÅÇ„Çä„Åå„Å®„ÅÜ',
                level_n: 5,
                word_type_id: 1,
                translations: {
                    meaning: [
                        { language_code: 'vi', value: 'C·∫£m ∆°n' },
                        { language_code: 'en', value: 'Thank you' }
                    ]
                }
            }
        ]

        for (const vocab of vocabularyData) {
            try {
                await vocabularyService.createFullVocabularyWithFiles(vocab)
                console.log(`‚úÖ T·∫°o t·ª´ v·ª±ng: ${vocab.word_jp}`)
            } catch (error) {
                console.log(`‚ö†Ô∏è  T·ª´ v·ª±ng ${vocab.word_jp} c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i`)
            }
        }

        console.log('‚úÖ Ho√†n th√†nh t·∫°o t·ª´ v·ª±ng b√†i 1!')
        console.log('\nüéâ Ho√†n th√†nh seed data!')

    } catch (error) {
        console.error('‚ùå L·ªói khi ch·∫°y seed data:', error)
    } finally {
        await app.close()
    }
}

main().catch(console.error)
